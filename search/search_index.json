{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Recent Posts \u00b6 How to consume an API with Python \u00b6 Felipe Guedes \u00b7 @guedesfelipe April 21, 2022 \u00b7 2 min read To consume an API in a simple way with python we will use the library called requests... Continue reading","title":"\ud83c\udfe0 &nbsp;Home"},{"location":"#recent-posts","text":"","title":"Recent Posts"},{"location":"#how-to-consume-an-api-with-python","text":"Felipe Guedes \u00b7 @guedesfelipe April 21, 2022 \u00b7 2 min read To consume an API in a simple way with python we will use the library called requests... Continue reading","title":"How to consume an API with Python"},{"location":"python/consume-api/","text":"\ud83d\udc7d\ufe0f How to consume an API with Python \u00b6 To consume an API in a simple way with python we will use the library called requests . \ud83d\udd27 Preparing the Environment \u00b6 Virtual Env Poetry python3 -m venv .venv # (1) source .venv/bin/activate # (2) pip install requests # (3) Creating a virtualenv ( Change python3 to your python PATH if necessary) Activate the virtualenv (MacOS and Linux) Install requests poetry install requests # (1) Install requests with Poetry \u2328\ufe0f Code \u00b6 In this example we are going to consume an API that will return random fun facts and print it on screen. consume_api.py 1 2 3 4 5 6 7 8 9 10 import requests # (1) try : response = requests . get ( 'https://api.aakhilv.me/fun/facts' ) # (2) response . raise_for_status () # (3) fun_fact = response . json ()[ 0 ] # (4) print ( f 'Fun Fact: { fun_fact } ' ) # (5) except HTTPError as error : # (6) print ( f '[ { error . response . status_code } ] { error } ' ) # (7) Importing the requests library Performing the get on endpoint /fun/facts in the API Checking if the request returned any error status_code , in case of error it will generate an exception of type HTTPError (Line 9 handle this) Convert response to json and get first element from the return list Print on screen the random fun fact If line 6 raise an HTTPError exception, here it will be handled Print status_code information and the error \ud83d\ude80 Running the Application \u00b6 python consume_api.py \ud83d\uddbc\ufe0f Output \u00b6","title":"\ud83d\udc7d\ufe0f How to consume an API with Python"},{"location":"python/consume-api/#how-to-consume-an-api-with-python","text":"To consume an API in a simple way with python we will use the library called requests .","title":"\ud83d\udc7d\ufe0f How to consume an API with Python"},{"location":"python/consume-api/#preparing-the-environment","text":"Virtual Env Poetry python3 -m venv .venv # (1) source .venv/bin/activate # (2) pip install requests # (3) Creating a virtualenv ( Change python3 to your python PATH if necessary) Activate the virtualenv (MacOS and Linux) Install requests poetry install requests # (1) Install requests with Poetry","title":"\ud83d\udd27 Preparing the Environment"},{"location":"python/consume-api/#code","text":"In this example we are going to consume an API that will return random fun facts and print it on screen. consume_api.py 1 2 3 4 5 6 7 8 9 10 import requests # (1) try : response = requests . get ( 'https://api.aakhilv.me/fun/facts' ) # (2) response . raise_for_status () # (3) fun_fact = response . json ()[ 0 ] # (4) print ( f 'Fun Fact: { fun_fact } ' ) # (5) except HTTPError as error : # (6) print ( f '[ { error . response . status_code } ] { error } ' ) # (7) Importing the requests library Performing the get on endpoint /fun/facts in the API Checking if the request returned any error status_code , in case of error it will generate an exception of type HTTPError (Line 9 handle this) Convert response to json and get first element from the return list Print on screen the random fun fact If line 6 raise an HTTPError exception, here it will be handled Print status_code information and the error","title":"\u2328\ufe0f Code"},{"location":"python/consume-api/#running-the-application","text":"python consume_api.py","title":"\ud83d\ude80 Running the Application"},{"location":"python/consume-api/#output","text":"","title":"\ud83d\uddbc\ufe0f Output"}]}
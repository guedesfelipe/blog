{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Recent Posts \u00b6 \ud83d\udd10 Rounding Secret \u00b6 Felipe Guedes \u00b7 @guedesfelipe August 23, 2022 \u00b7 2 min read Do you know how round works in python under the hood? I didn't know either and I thought it was interesting... Continue reading How to consume an API with Python \u00b6 Felipe Guedes \u00b7 @guedesfelipe April 21, 2022 \u00b7 2 min read To consume an API in a simple way with python we will use the library called requests... Continue reading","title":"\ud83c\udfe0 &nbsp;Home"},{"location":"#recent-posts","text":"","title":"Recent Posts"},{"location":"#rounding-secret","text":"Felipe Guedes \u00b7 @guedesfelipe August 23, 2022 \u00b7 2 min read Do you know how round works in python under the hood? I didn't know either and I thought it was interesting... Continue reading","title":"\ud83d\udd10 Rounding Secret"},{"location":"#how-to-consume-an-api-with-python","text":"Felipe Guedes \u00b7 @guedesfelipe April 21, 2022 \u00b7 2 min read To consume an API in a simple way with python we will use the library called requests... Continue reading","title":"How to consume an API with Python"},{"location":"python/consume-api/","text":"\ud83d\udc7d\ufe0f How to consume an API with Python \u00b6 To consume an API in a simple way with python we will use the library called requests . \ud83d\udd27 Preparing the Environment \u00b6 Virtual Env Poetry python3 -m venv .venv # (1) source .venv/bin/activate # (2) pip install requests # (3) Creating a virtualenv ( Change python3 to your python PATH if necessary) Activate the virtualenv (MacOS and Linux) Install requests poetry add requests # (1) Install requests with Poetry \u2328\ufe0f Code \u00b6 In this example we are going to consume an API that will return random fun facts and print it on screen. consume_api.py 1 2 3 4 5 6 7 8 9 10 import requests # (1) try : response = requests . get ( 'https://api.aakhilv.me/fun/facts' ) # (2) response . raise_for_status () # (3) fun_fact = response . json ()[ 0 ] # (4) print ( f 'Fun Fact: { fun_fact } ' ) # (5) except HTTPError as error : # (6) print ( f '[ { error . response . status_code } ] { error } ' ) # (7) Importing the requests library Performing the get on endpoint /fun/facts in the API Checking if the request returned any error status_code , in case of error it will generate an exception of type HTTPError (Line 9 handle this) Convert response to json and get first element from the return list Print on screen the random fun fact If line 6 raise an HTTPError exception, here it will be handled Print status_code information and the error \ud83d\ude80 Running the Application \u00b6 python consume_api.py \ud83d\uddbc\ufe0f Output \u00b6","title":"\ud83d\udc7d\ufe0f How to consume an API with Python"},{"location":"python/consume-api/#how-to-consume-an-api-with-python","text":"To consume an API in a simple way with python we will use the library called requests .","title":"\ud83d\udc7d\ufe0f How to consume an API with Python"},{"location":"python/consume-api/#preparing-the-environment","text":"Virtual Env Poetry python3 -m venv .venv # (1) source .venv/bin/activate # (2) pip install requests # (3) Creating a virtualenv ( Change python3 to your python PATH if necessary) Activate the virtualenv (MacOS and Linux) Install requests poetry add requests # (1) Install requests with Poetry","title":"\ud83d\udd27 Preparing the Environment"},{"location":"python/consume-api/#code","text":"In this example we are going to consume an API that will return random fun facts and print it on screen. consume_api.py 1 2 3 4 5 6 7 8 9 10 import requests # (1) try : response = requests . get ( 'https://api.aakhilv.me/fun/facts' ) # (2) response . raise_for_status () # (3) fun_fact = response . json ()[ 0 ] # (4) print ( f 'Fun Fact: { fun_fact } ' ) # (5) except HTTPError as error : # (6) print ( f '[ { error . response . status_code } ] { error } ' ) # (7) Importing the requests library Performing the get on endpoint /fun/facts in the API Checking if the request returned any error status_code , in case of error it will generate an exception of type HTTPError (Line 9 handle this) Convert response to json and get first element from the return list Print on screen the random fun fact If line 6 raise an HTTPError exception, here it will be handled Print status_code information and the error","title":"\u2328\ufe0f Code"},{"location":"python/consume-api/#running-the-application","text":"python consume_api.py","title":"\ud83d\ude80 Running the Application"},{"location":"python/consume-api/#output","text":"","title":"\ud83d\uddbc\ufe0f Output"},{"location":"python/rounding-secret/","text":"\ud83d\udd10 Rounding Secret \u00b6 Do you know how round works in python under the hood? I didn't know either and I thought it was interesting. Let's do some experiments with the round with some calcs: \\(\\frac{7}{2}=\\lfloor{3.5}\\rceil\\implies4\\) \u00b6 Python Example # >>>$ round ( 7 /2 ) 4 \\(\\frac{3}{2}=\\lfloor{1.5}\\rceil\\implies2\\) \u00b6 Python Example # >>>$ round ( 3 /2 ) 2 \\(\\frac{9}{2}=\\lfloor{4.5}\\rceil\\implies5\\) \u00b6 # >>>$ round ( 9 /2 ) 4 Attention Why python doesn't round to 5? \\(\\frac{5}{2}=\\lfloor{2.5}\\rceil\\implies3\\) \u00b6 # >>>$ round ( 5 /2 ) 2 Attention Why python doesn't round to 3? Why? \u00b6 This Result was not expected, right? But everything has a reason This is because, in Python, the round function implements banker's rounding , where all the half values are rounded to the closest even number. IEEE 754 recommends using this rounding. Info Institute of Electrical and Electronics Engineers - ( IEEE ) Round Python Docs Quote round(number[, ndigits]) \u00b6 Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None , it returns the nearest integer to its input. For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus ndigits ; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0 , and round(1.5) is 2 ). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if ndigits is omitted or None . Otherwise, the return value has the same type as number . For a general Python object number , round delegates to number.__round__ . Note The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68 . This is not a bug: it\u2019s a result of the fact that most decimal fractions can\u2019t be represented exactly as a float. See Floating Point Arithmetic: Issues and Limitations for more information. After knowing this I'll never use the round in the same way again. Recommended reading: Is bankers rounding really more numerically stable?","title":"\ud83d\udd10 Rounding Secret"},{"location":"python/rounding-secret/#rounding-secret","text":"Do you know how round works in python under the hood? I didn't know either and I thought it was interesting. Let's do some experiments with the round with some calcs:","title":"\ud83d\udd10 Rounding Secret"},{"location":"python/rounding-secret/#frac72lfloor35rceilimplies4","text":"Python Example # >>>$ round ( 7 /2 ) 4","title":"\\(\\frac{7}{2}=\\lfloor{3.5}\\rceil\\implies4\\)"},{"location":"python/rounding-secret/#frac32lfloor15rceilimplies2","text":"Python Example # >>>$ round ( 3 /2 ) 2","title":"\\(\\frac{3}{2}=\\lfloor{1.5}\\rceil\\implies2\\)"},{"location":"python/rounding-secret/#frac92lfloor45rceilimplies5","text":"# >>>$ round ( 9 /2 ) 4 Attention Why python doesn't round to 5?","title":"\\(\\frac{9}{2}=\\lfloor{4.5}\\rceil\\implies5\\)"},{"location":"python/rounding-secret/#frac52lfloor25rceilimplies3","text":"# >>>$ round ( 5 /2 ) 2 Attention Why python doesn't round to 3?","title":"\\(\\frac{5}{2}=\\lfloor{2.5}\\rceil\\implies3\\)"},{"location":"python/rounding-secret/#why","text":"This Result was not expected, right? But everything has a reason This is because, in Python, the round function implements banker's rounding , where all the half values are rounded to the closest even number. IEEE 754 recommends using this rounding. Info Institute of Electrical and Electronics Engineers - ( IEEE )","title":"Why?"},{"location":"python/rounding-secret/#roundnumber-ndigits","text":"Return number rounded to ndigits precision after the decimal point. If ndigits is omitted or is None , it returns the nearest integer to its input. For the built-in types supporting round(), values are rounded to the closest multiple of 10 to the power minus ndigits ; if two multiples are equally close, rounding is done toward the even choice (so, for example, both round(0.5) and round(-0.5) are 0 , and round(1.5) is 2 ). Any integer value is valid for ndigits (positive, zero, or negative). The return value is an integer if ndigits is omitted or None . Otherwise, the return value has the same type as number . For a general Python object number , round delegates to number.__round__ . Note The behavior of round() for floats can be surprising: for example, round(2.675, 2) gives 2.67 instead of the expected 2.68 . This is not a bug: it\u2019s a result of the fact that most decimal fractions can\u2019t be represented exactly as a float. See Floating Point Arithmetic: Issues and Limitations for more information. After knowing this I'll never use the round in the same way again. Recommended reading: Is bankers rounding really more numerically stable?","title":"round(number[, ndigits])"}]}